{{- if and .Values.etcdMonitoringHelper.enabled  .Values.etcdMonitoringHelper.etcdEndpointSecretGenerator.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-%s" (include "wiztelemetry-monitoring-helper.fullname" .) "etcd-endpoint-secret-generator" | trunc 63 | trimSuffix "-" }}
  namespace: {{ template "wiztelemetry-monitoring-helper.namespace" . }}
  labels:
    app: etcd-endpoint-secret-generator
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  etcd-endpoint-secret-generator.sh: |
    #!/bin/sh

    if kubectl get endpoints whizard-monitoring-agent-k-kube-etcd -n kube-system >/dev/null 2>&1; then
        echo "Endpoint whizard-monitoring-agent-k-kube-etcd exists. Skip."
    elif [ $? -eq 1 ]; then
        kubectl -n {{ template "wiztelemetry-monitoring-helper.namespace" . }} create secret generic kube-etcd-client-certs \
                --from-file=etcd-client-ca.crt=/etc/ssl/etcd/ssl/ca.pem \
                --from-file=etcd-client.crt=/etc/ssl/etcd/ssl/node-${KUBERNETES_NODE_NAME}.pem \
                --from-file=etcd-client.key=/etc/ssl/etcd/ssl/node-${KUBERNETES_NODE_NAME}-key.pem
        
        cat <<EOF > etcd-endpoints.yaml
    apiVersion: v1
    kind: Endpoints
    metadata:
      annotations:
        meta.helm.sh/release-name: whizard-monitoring-agent
        meta.helm.sh/release-namespace: kubesphere-monitoring-system
      labels:
        app: kube-prometheus-stack-kube-etcd
        app.kubernetes.io/instance: whizard-monitoring-agent
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: etcd
        app.kubernetes.io/part-of: kube-prometheus-stack
        app.kubernetes.io/vendor: kubesphere
        heritage: Helm
        k8s-app: etcd-server
        kubesphere.io/extension-ref: whizard-monitoring
        release: whizard-monitoring-agent
      name: whizard-monitoring-agent-k-kube-etcd
      namespace: kube-system
    subsets:
    - ports:
      - name: http-metrics
        port: 2379
        protocol: TCP
      addresses:
    EOF
        
        # get etcd address from kube-apiserver and replace the etcd address in etcd-endpoints.yaml
        etcdendpoints=$(kubectl get pod -n kube-system -l component=kube-apiserver -o jsonpath='{.items[0].spec.containers[0].command}' | jq -r '.[] | select(startswith("--etcd-servers="))' | grep -oE "([0-9]{1,3}[\.]){3}[0-9]{1,3}")
        
        for ip in $etcdendpoints; do
          echo "  - ip: $ip" >> etcd-endpoints.yaml
        done
        
        kubectl apply -f etcd-endpoints.yaml
    else
        echo "Error checking Endpoint" >&2
        exit 1
    fi    

{{- end }}
---
{{- if and .Values.etcdMonitoringHelper.enabled  .Values.etcdMonitoringHelper.etcdEndpointSecretGenerator.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ printf "%s-%s" (include "wiztelemetry-monitoring-helper.fullname" .) "etcd-endpoint-secret-generator" | trunc 63 | trimSuffix "-" }}
  namespace: {{ template "wiztelemetry-monitoring-helper.namespace" . }}  
  labels:
    app: etcd-endpoint-secret-generator
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: {{ .Values.hook.backoffLimit }}
  template:
    metadata:
      labels:
        app: etcd-endpoint-secret-generator
    spec:
      restartPolicy: Never
      hostNetwork: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 60
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 60
      containers:
      - name: generator
        image: "{{ .Values.global.imageRegistry | default .Values.hook.image.registry }}/{{ .Values.hook.image.repository }}:{{ .Values.hook.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.hook.image.pullPolicy }}
        command:
          - "/bin/sh"
          - "/kse/etcd-endpoint-secret-generator.sh"
        env:
        - name: KUBERNETES_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        {{- with .Values.hook.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
        volumeMounts:
        - mountPath: /etc/localtime
          name: host-time
          readOnly: true
        - mountPath: /root/.kube/config
          name: kubeconfig
          readOnly: true
        - mountPath: /etc/ssl/etcd/ssl
          name: etcd-certs
          readOnly: true
        - mountPath: /kse/etcd-endpoint-secret-generator.sh
          name: etcd-endpoint-secret-generator
          subPath: etcd-endpoint-secret-generator.sh
      volumes:
      - hostPath:
          path: /etc/localtime
          type: ""
        name: host-time
      - hostPath:
          path: /root/.kube/config
          type: ""
        name: kubeconfig
      - hostPath:
          path: /etc/ssl/etcd/ssl
          type: ""
        name: etcd-certs
      - configMap:
          defaultMode: 420
          name: {{ printf "%s-%s" (include "wiztelemetry-monitoring-helper.fullname" .) "etcd-endpoint-secret-generator" | trunc 63 | trimSuffix "-" }}
        name: etcd-endpoint-secret-generator

{{- end }}